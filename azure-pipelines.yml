# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
      - "*"

pool:
  name: 'Default'

steps:
  - script: |
      git config --global user.name "Truin-kyash"
      git config --global user.email "suyash.keshari@truinc.com"
    displayName: "Configure Git User"

  - script: |
      echo "Setting up Git remotes..."
      
      # Remove remotes if they exist
      git remote remove github 2>/dev/null || true
      git remote remove azure 2>/dev/null || true

      # Add remotes
      git remote add github https://$(GH_TOKEN)@github.com/Truin-kyash/Tru-Sync.git
      git remote add azure https://$(AZURE_PAT)@dev.azure.com/suyashkeshari20010558/Repository%20Sync/_git/Tru-Sync

      # Set Git to rebase when pulling (prevents unnecessary merge commits)
      git config --global pull.rebase true
    displayName: "Configure Git User & Merge Strategy"

  - script: |
      echo "Setting up Git remotes..."
      
      git remote remove github || true
      git remote add github https://$(GH_TOKEN)@github.com/Truin-kyash/Tru-Sync.git

      git remote remove azure || true
      git remote add azure https://$(AZURE_PAT)@dev.azure.com/suyashkeshari20010558/Repository%20Sync/_git/Tru-Sync
    displayName: "Set Up Git Remotes"

  - script: |
      echo "Fetching latest updates from Azure DevOps..."
      
      # Fetch all branches from Azure
      git fetch azure --prune
      
      # Get all branch names from Azure
      BRANCHES=$(git branch -r | grep 'azure/' | sed 's/azure\///')

      for BRANCH in $BRANCHES; do
        echo "Processing branch: $BRANCH"

        # Checkout the branch locally
        git checkout -B $BRANCH azure/$BRANCH || {
          echo "Failed to checkout $BRANCH, skipping."
          continue
        }

        # Pull latest changes
        git pull --rebase azure $BRANCH || echo "No updates for $BRANCH from Azure."

        # Push to GitHub with the exact same branch name
        if ! git push github $BRANCH; then
          echo "Push failed for branch: $BRANCH. Skipping..."
          continue
        fi
      done
    displayName: "Sync All Azure DevOps Branches to GitHub"
