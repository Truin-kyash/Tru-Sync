# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
  branches:
    include:
      - "*"

pool:
  name: 'Default'

steps:
  - script: |
      git config --global user.name "Truin-kyash"
      git config --global user.email "suyash.keshari@truinc.com"
      git config --global pull.rebase true
    displayName: "Configure Git User & Merge Strategy"

  - script: |
      echo "Setting up Git remotes..."
      
      # Remove existing remotes
      git remote remove github 2>/dev/null || true
      git remote remove azure 2>/dev/null || true

      # Add GitHub and Azure DevOps remotes
      git remote add github https://$(GH_TOKEN)@github.com/Truin-kyash/Tru-Sync.git
      git remote add azure https://$(AZURE_PAT)@dev.azure.com/suyashkeshari20010558/Repository%20Sync/_git/Tru-Sync
    displayName: "Set Up Git Remotes"

  - script: |
      echo "Fetching latest updates from both remotes..."
      
      # Fetch branches from both GitHub and Azure DevOps
      git fetch github --prune
      git fetch azure --prune
    displayName: "Fetch Updates from GitHub & Azure DevOps"

  - script: |
      echo "Syncing branches between Azure DevOps and GitHub..."

      # Ensure a clean working directory before starting
      git reset --hard
      git clean -fd

      # Get list of branches from both remotes
      BRANCHES=$(git branch -r | grep -E 'azure/|github/' | sed -E 's/^[ ]+|azure\/|github\///g' | sort -u)

      for BRANCH in $BRANCHES; do
        echo "Processing branch: $BRANCH"

        # Ensure we are on a clean branch
        git reset --hard
        git clean -fd

        # Ensure the branch exists in both remotes
        EXISTS_IN_AZURE=$(git branch -r | grep "azure/$BRANCH")
        EXISTS_IN_GITHUB=$(git branch -r | grep "github/$BRANCH")

        # Checkout or create the branch
        git checkout -B "$BRANCH" || {
          echo "Failed to checkout $BRANCH, skipping..."
          continue
        }

        # Pull latest changes from Azure first
        if [ -n "$EXISTS_IN_AZURE" ]; then
          echo "Pulling latest changes from Azure DevOps..."
          git pull --rebase --autostash azure "$BRANCH" || echo "No updates from Azure."
        fi

        # Pull latest changes from GitHub
        if [ -n "$EXISTS_IN_GITHUB" ]; then
          echo "Pulling latest changes from GitHub..."
          git pull --rebase --autostash github "$BRANCH" || echo "No updates from GitHub."
        fi

        # Repack Git objects to fix potential corruption
        git repack -a -d

        # Push to both remotes with force to keep them in sync
        if ! git push --force github "$BRANCH"; then
          echo "Push to GitHub failed for branch: $BRANCH, skipping..."
        fi
        if ! git push --force azure "$BRANCH"; then
          echo "Push to Azure failed for branch: $BRANCH, skipping..."
        fi
      done
    displayName: "Bi-Directional Sync Between Azure DevOps & GitHub"
